class Tfilter :public Tbase_filter
{
public:
	Tpoint p0, p1;               //p0-точка начала отрезка, p1-последняя точка этого отрезка
	//	ofstream output{ "new.dat" };
	double delta, k[2];
	Tfilter(Tpoint p_, double delta_ = 10)
	{
		delta = delta_;
		p0 = p_;
		k[0] = -1e308;
		k[1] = 1e308;
		// первую точку выдаем на выход
		done = 0;
		//output << setprecision(18) << p0.t << '\t' << p0.y << endl;
	}
	~Tfilter()
	{
		//		output << setprecision(18) << p1.t << '\t' << p1.y << endl;
	}
	void ini(Tpoint &p_first, Tpoint &p_last)
	{
		p0 = p_first;
		p1 = p_last;
		k[0] = -1e308;
		k[1] = 1e308;
		done = 0;
	}
	void push(const Tpoint& p)   //p- послежняя считанная точка
	{
		double k_new[2];
		double edt = 1. / (p.t - p0.t);
		k_new[0] = ((p.y - p0.y) - delta)*edt;
		k_new[1] = ((p.y - p0.y) + delta)*edt;
		if (k_new[0] > k[1] || k_new[1] < k[0])
		{
			double k_best = (k[1] + k[0]) / 2;
			p0.y = p0.y + k_best * (p1.t - p0.t);
			p0.t = p1.t;
			p1 = p;
			//			output << setprecision(18) << p0.t << '\t' << p0.y << endl;
			k[0] = -1e308;
			k[1] = 1e308;
			done = 1;
		}
		else
		{
			p1 = p;
			if ((k_new[0] >= k[0] && k_new[1] <= k[1]))
			{
				k[0] = k_new[0];
				k[1] = k_new[1];
			}
			else if (k_new[0] <= k[0] && k_new[1] <= k[1])
			{
				k[1] = k_new[1];
			}
			else if (k_new[0] <= k[0] && k_new[1] >= k[1]) {}
			else if (k_new[0] >= k[0] && k_new[1] >= k[1])
			{
				k[0] = k_new[0];
			}
		}
	}
};