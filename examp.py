import sympy
sympy.init_session(quiet=True)
from sympy import *
x, y, z = symbols('x y z')
init_printing(use_latex='mathjax',use_unicode=True)
display((sqrt(1/x)))

sympy.latex((sqrt(1/x), x))


from sympy import Integral, latex
from sympy.abc import x
latex(x**2)
x^{2}
latex(x**2, mode='inline')

latex(x**2, mode='equation')

latex(x**2, mode='equation*')

latex(1/x)

latex(Integral(x**2, x))



import re
import numpy  as np

b = 'AKO=0.119365E+01,0.118498E+01,0.117557E+01,0.116525E+01,0.115534E+01,0.114630E+01,0.113838E+01,0.113187E+01,0.112542E+01,0.111552E+01,0.110224E+01,0.108850E+01,0.107513E+01,0.106209E+01,0.104958E+01,0.103735E+01,0.102555E+01,0.101409E+01,0.100298E+01,0.992192E+00,0.981750E+00,0.971652E+00,0.961905E+00,0.952492E+00,0.943422E+00,0.934690E+00,0.926304E+00,0.918256E+00,0.910542E+00,0.903155E+00,0.896097E+00,0.889347E+00,0.882903E+00,0.876769E+00,0.870936E+00,0.865370E+00,0.860086E+00,0.855058E+00,0.850278E+00,0.845738E+00,0.841424E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.121045E+01,0.120130E+01,0.119170E+01,0.118129E+01,0.117132E+01,0.116222E+01,0.115430E+01,0.114785E+01,0.114168E+01,0.113202E+01,0.111876E+01,0.110492E+01,0.109144E+01,0.107833E+01,0.106561E+01,0.105327E+01,0.104127E+01,0.102964E+01,0.101835E+01,0.100740E+01,0.996798E+00,0.986530E+00,0.976602E+00,0.967019E+00,0.957787E+00,0.948897E+00,0.940351E+00,0.932164E+00,0.924289E+00,0.916768E+00,0.909575E+00,0.902709E+00,0.896155E+00,0.889914E+00,0.883969E+00,0.878317E+00,0.872943E+00,0.867841E+00,0.862994E+00,0.858379E+00,0.854009E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.123551E+01,0.122524E+01,0.121493E+01,0.120397E+01,0.119352E+01,0.118396E+01,0.117561E+01,0.116889E+01,0.116293E+01,0.115356E+01,0.114016E+01,0.112602E+01,0.111217E+01,0.109868E+01,0.108556E+01,0.107278E+01,0.106035E+01,0.104829E+01,0.103655E+01,0.102516E+01,0.101411E+01,0.100341E+01,0.993048E+00,0.983048E+00,0.973397E+00,0.964116E+00,0.955207E+00,0.946606E+00,0.938392E+00,0.930526E+00,0.923014E+00,0.915841E+00,0.909007E+00,0.902497E+00,0.896340E+00,0.890419E+00,0.884834E+00,0.879528E+00,0.874504E+00,0.869740E+00,0.865211E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.125250E+01,0.124129E+01,0.123025E+01,0.121869E+01,0.120763E+01,0.119746E+01,0.118848E+01,0.118118E+01,0.117507E+01,0.116583E+01,0.115225E+01,0.113777E+01,0.112355E+01,0.110968E+01,0.109615E+01,0.108296E+01,0.107011E+01,0.105760E+01,0.104543E+01,0.103360E+01,0.102212E+01,0.101098E+01,0.100021E+01,0.989787E+00,0.979738E+00,0.970060E+00,0.960754E+00,0.951819E+00,0.943259E+00,0.935065E+00,0.927236E+00,0.919771E+00,0.912652E+00,0.905883E+00,0.899447E+00,0.893333E+00,0.887533E+00,0.882034E+00,0.876827E+00,0.871894E+00,0.867205E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.126723E+01,0.125515E+01,0.124341E+01,0.123118E+01,0.121947E+01,0.120859E+01,0.119881E+01,0.119063E+01,0.118407E+01,0.117485E+01,0.116107E+01,0.114626E+01,0.113166E+01,0.111738E+01,0.110342E+01,0.108980E+01,0.107650E+01,0.106355E+01,0.105092E+01,0.103864E+01,0.102670E+01,0.101512E+01,0.100390E+01,0.993052E+00,0.982584E+00,0.972497E+00,0.962800E+00,0.953486E+00,0.944556E+00,0.936019E+00,0.927857E+00,0.920073E+00,0.912660E+00,0.905612E+00,0.898912E+00,0.892551E+00,0.886523E+00,0.880807E+00,0.875398E+00,0.870287E+00,0.865437E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,0.000000E+00,'
KO = re.findall("AKO=(.+)", b)


class kk:
    def  __init__(self):
        pass
    def arr(self,i):
        return np.ndarray(shape=(i,1), dtype=int)

    def index(self,i):
        return i
    pass

class Ta:
    def index(self, i):
        return i


import yaml
x={}
p={}
d = yaml.load(open('a.yaml',"r"))
x=d['kart'].split('\n')
for i in range(len(x)):
    for j in range(len(x[i].split())):
        p[(i,j)] =x[i].split()[j]







import matplotlib.pyplot as plt
from scipy.interpolate import UnivariateSpline
x = np.linspace(-3, 3, 5)
y = np.array([1,2,3,4,5])

x1 = np.linspace(-3, 3, 10)
y1 = [1,2,3,4,5,6,7,2,9,10]
deev = UnivariateSpline(x, y,s=0)

y_d = deev(x1)

np.min(y_d-y1)

plt.plot(xlist,ll)

plt.plot(x, y, 'ro', ms=5)
plt.plot(x1, y1, 'ro')
plt.plot()








#dsada sasd prover

symbol : 1,2,3,4,5
kart : |1
    1 1
   1 2 2
    2 1
kart1 : |1
    1 2 3 4 1
   2 1 2 3 1 2
  1 2 3 1 2 1 5
   1 2 4 5 4 1
    2 1 5 4 1

kart2 : |1
       1 3 1 1 3 1
      1 1 1 1 1 1 1
     1 1 1 2 2 1 1 3
    3 1 2 2 4 2 2 1 1
   1 1 2 4 5 5 4 2 1 1
  1 1 1 2 5 5 5 2 1 1 1
   3 1 2 4 5 5 4 2 1 3
    1 1 2 2 4 2 2 1 1
     1 1 1 2 2 1 1 1
      3 1 1 1 1 1 3
       1 1 1 3 1 1





#Расчет средних тепловых характеристик АЗ
Vaz=Haz*math.pi*Dequl**2/4/10**6 #объем АЗ в м^3
qv=Q/Vaz  #удельная энергонапряженность АЗ
Qtvs=kQ*Q/Ntvs #средняя тепловая можность ТВС
qlsr=Qtvs/(Ntvl*Haz) #средний линейный тепловой поток от твелов,Мвт/м
qsr=qlsr/(math.pi*dtvl/1000) #средняя плотнссть теплового потока на пов-ти твелов
qmax=qsr*kr*kz #max плотнссть теплового потока на пов-ти твелов
print('удельная энергонапряженность АЗ', form % qv,'МВт/м^3')
print('средняя тепловая мощность ТВС',form % Qtvs,'МВт')
qlsrviv=qlsr*10**6/10**2
print('средний линейный тепловой поток от твэлов', form % qlsrviv,'Вт/см')
print('средняя плотность теплового потока на пов-ти твэлов',form % qsr,'МВт/м^2')


##График распределения плотности теплового потока на поверхности твэлов по высоте
def q(z,qmax,Heff):
    return qmax*cos(math.pi*z/Heff)

xlist=plt.mlab.frange(-Haz/2,Haz/2,0.01)
ylist=[q(z,qmax,Heff) for z in xlist]
plt.plot(xlist,ylist,'red')
plt.ylabel(r'$q(z),$ ${}\frac {{МВт}}{{м^2}}$')
plt.xlabel('$z,$ $м$')
plt.grid(True)




from scipy.special import*
from sympy import*
x=symbols('x')
integrate(cos(3.14*x/4.41),(x,-2.1,0.88))

